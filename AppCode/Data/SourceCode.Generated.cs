// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "SourceCode.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class SourceCode
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v18.04.00
// App/Edition: SourceCode/
// User:        2sic Web-Developer
namespace AppCode.Data
{
  // This is a generated class for SourceCode 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// SourceCode data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Code`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class SourceCode: AutoGenerated.ZAutoGenSourceCode
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.SourceCode in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenSourceCode: Custom.Data.CustomItem
  {
    /// <summary>
    /// Code as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Code", scrubHtml: true) etc.
    /// </summary>
    public string Code => _item.String("Code", fallback: "");

    /// <summary>
    /// FontSize as int. <br/>
    /// To get other types use methods such as .Decimal("FontSize")
    /// </summary>
    public int FontSize => _item.Int("FontSize");

    /// <summary>
    /// Height as int. <br/>
    /// To get other types use methods such as .Decimal("Height")
    /// </summary>
    public int Height => _item.Int("Height");

    /// <summary>
    /// Language as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Language", scrubHtml: true) etc.
    /// </summary>
    public string Language => _item.String("Language", fallback: "");

    /// <summary>
    /// LineNumbers as bool. <br/>
    /// To get nullable use .Get("LineNumbers") as bool?;
    /// </summary>
    public bool LineNumbers => _item.Bool("LineNumbers");

    /// <summary>
    /// Minimap as bool. <br/>
    /// To get nullable use .Get("Minimap") as bool?;
    /// </summary>
    public bool Minimap => _item.Bool("Minimap");

    /// <summary>
    /// ReadOnly as bool. <br/>
    /// To get nullable use .Get("ReadOnly") as bool?;
    /// </summary>
    public bool ReadOnly => _item.Bool("ReadOnly");

    /// <summary>
    /// Theme as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Theme", scrubHtml: true) etc.
    /// </summary>
    public string Theme => _item.String("Theme", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}